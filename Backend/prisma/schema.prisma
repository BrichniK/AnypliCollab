generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  COLLAB
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  password String
  name     String
  role     Role    @default(COLLAB)
  activity Activity?

  tasks    Task[]  @relation("UserTasks")
  boardUsers BoardUser[]  
}

enum Status {
  ToDo
  Proceeding
  Done
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status   @default(ToDo)
  position    Position
  wallpaper   String

  boardId     String   @db.ObjectId
  board       Board    @relation("BoardTasks", fields: [boardId], references: [id], onDelete: Cascade)

  userId      String   @db.ObjectId
  user        User     @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
}

type Position {
  left Int
  top  Int
}

model Board {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  wallpaper String

  tasks     Task[]   @relation("BoardTasks")
  users BoardUser[]  
}

model BoardUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  boardId String @db.ObjectId
  userId  String @db.ObjectId

  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])  
}



model Activity {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @db.ObjectId
    description String
    date DateTime
  }

 



