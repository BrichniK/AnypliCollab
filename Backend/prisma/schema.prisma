generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  COLLAB
}

enum Status {
  ToDo
  Proceeding
  Done
}

enum Priority {
  Low
  High
}

model User {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  email     String         @unique
  password  String
  name      String
  imageURL  String?        
  role      Role           @default(COLLAB)
  activities Activity[]   @relation("UserActivities")
  boardUsers BoardUser[]
  tasks     Task[]         @relation("UserTasks")
  reclas    Reclamation[] @relation("UserRecla") 
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status   @default(ToDo)
  deadline    DateTime
  priority    Priority
  boardId     String   @db.ObjectId
  board       Board    @relation("BoardTasks", fields: [boardId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation("UserTasks", fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[] @relation("TaskActivities")
}

model Board {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  wallpaper String
  tasks     Task[]     @relation("BoardTasks")
  users     BoardUser[]
  activities Activity[] @relation("BoardActivities")
}

model BoardUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  boardId String @db.ObjectId
  userId  String? @db.ObjectId

  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User ?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])  
}

model Activity {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  description String
  date        DateTime
  boardId     String?  @db.ObjectId  // Make boardId optional (nullable)
  taskId     String?  @db.ObjectId  // Make boardId optional (nullable)

  user        User     @relation("UserActivities", fields: [userId], references: [id])
  board       Board?   @relation("BoardActivities", fields: [boardId], references: [id]) 
  task       Task?   @relation("TaskActivities", fields: [boardId], references: [id]) // Make relation optional
}

enum Statusrecla {
  WAITING
  TREATED
}

model Reclamation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  commentaire String
  dateadd     DateTime
  dateupdate  DateTime?
  datetrait   DateTime?
  statut      Statusrecla
  userId      String     @db.ObjectId
  user        User       @relation("UserRecla", fields: [userId], references: [id], onDelete: Cascade)
}
